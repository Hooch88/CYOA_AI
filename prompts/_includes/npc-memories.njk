<currentNpc>
  <name>{{ currentNpc.name }}</name>
  <description>{{ currentNpc.description }}</description>
  <class>{{ currentNpc.class | default('Unknown') }}</class>
  <race>{{ currentNpc.race | default('Unknown') }}</race>
  <personality>
    <type>{{ currentNpc.personality.type | default('Unknown', true) }}</type>
    <traits>{{ currentNpc.personality.traits | default('None', true) }}</traits>
    <notes>{{ currentNpc.personality.notes | default('', true) }}</notes>
  </personality>
  <health>{{ currentNpc.health | default('unknown') }}</health>
  <maxHealth>{{ currentNpc.maxHealth | default('unknown') }}</maxHealth>
  <dispositionsTowardsPlayer>
    {% for disposition in currentNpc.dispositionsTowardsPlayer %}
    <dispositionTowardsPlayer>
      <type>{{ disposition.type }}</type>
      <intensity>{{ disposition.intensityName }}</intensity>
    </dispositionTowardsPlayer>
    {% endfor %}
  </dispositionsTowardsPlayer>
  <importantMemories>
    {% for memory in currentNpc.importantMemories %}
    <memory>{{ memory }}</memory>
    {% endfor %}
  </importantMemories>
  <inventory>
    {% for item in currentNpc.inventory %}<item>
      <name>{{ item.name }}</name>
      <equippedSlot>{{ item.equippedSlot | default('none') }}</equippedSlot>
    </item>
  {% endfor %}</inventory>
  <skills>
    {% for skill in currentNpc.skills %}{% if skill.value > 1 %}{{ skill.name }}, {% endif %}{% endfor %}
  </skills>
  <abilities>
    {% for ability in currentNpc.abilities %}
    <ability>
      <name>{{ ability.name }}</name>
      <description>{{ ability.description }}</description>
      <type>{{ ability.type }}</type>
      <level>{{ ability.level }}</level>
    </ability>
    {% endfor %}
  </abilities>
  <statusEffects>
    {% for effect in currentNpc.statusEffects %}
    <effect>
      <description>{{ effect.description }}</description>
      <duration>{{ effect.duration | default('unknown') }}</duration>
    </effect>
    {% endfor %}
  </statusEffects>
  <needBars>
    {% for bar in currentNpc.needBars %}
    <needBar>
      <name>{{ bar.name }}</name>
      <description>{{ bar.description }}</description>
      <value>{{ bar.value | default('', true) }}</value>
      <min>{{ bar.min | default('', true) }}</min>
      <max>{{ bar.max | default('', true) }}</max>
      <changePerTurn>{{ bar.changePerTurn | default(0) }}</changePerTurn>
      <playerOnly>{{ bar.playerOnly | default(false) }}</playerOnly>
      <relatedAttribute>{{ bar.relatedAttribute | default('', true) }}</relatedAttribute>
      <currentThreshold>
        <name>{% if bar.currentThreshold %}{{ bar.currentThreshold.name | default('Neutral') }}{% else %}Neutral{% endif %}</name>
        <effect>{% if bar.currentThreshold %}{{ bar.currentThreshold.effect | default('No active effect') }}{% else %}No active effect{% endif %}</effect>
        <value>{% if bar.currentThreshold %}{{ bar.currentThreshold.threshold | default('', true) }}{% else %}{% endif %}</value>
      </currentThreshold>
      <effectThresholds>
        {% for threshold in bar.effectThresholds %}
        <threshold>
          <value>{{ threshold.threshold | default('', true) }}</value>
          <name>{{ threshold.name | default('', true) }}</name>
          <effect>{{ threshold.effect | default('', true) }}</effect>
        </threshold>
        {% endfor %}
      </effectThresholds>
      <increases>
        <small>
          {% for item in bar.increases.small %}<trigger>{{ item }}</trigger>{% endfor %}
        </small>
        <large>
          {% for item in bar.increases.large %}<trigger>{{ item }}</trigger>{% endfor %}
        </large>
        <fill>
          {% for item in bar.increases.fill %}<trigger>{{ item }}</trigger>{% endfor %}
        </fill>
      </increases>
      <decreases>
        <small>
          {% for item in bar.decreases.small %}<trigger>{{ item }}</trigger>{% endfor %}
        </small>
        <large>
          {% for item in bar.decreases.large %}<trigger>{{ item }}</trigger>{% endfor %}
        </large>
      </decreases>
    </needBar>
    {% endfor %}
  </needBars>
</currentNpc>
<recentNpcHistory>
  {% if not rawHistoryEntries %}
    <error>Missing history entries data for NPC history context.</error>
  {% elif rawHistoryEntries is string %}
    <error>History entries data is a string; expected an iterable of entries.</error>
  {% elif not (rawHistoryEntries is iterable) %}
    <error>History entries data is not iterable.</error>
  {% else %}
    {% set npcNameValue = currentNpc.name | default('') | trim %}
    {% if not npcNameValue %}
      <error>currentNpc.name is required to filter history entries.</error>
    {% else %}
      {% set normalizedNpcName = npcNameValue | lower %}
      {% set collected = namespace(entries=[]) %}
      {% set maxEntries = 10 %}
      {% for entry in rawHistoryEntries | reverse %}
        {% if collected.entries | length < maxEntries %}
          {% if entry %}
            {% set metadata = entry.metadata if entry.metadata is defined else null %}
            {% set npcNamesList = metadata.npcNames if metadata and metadata.npcNames is defined else [] %}
            {% if npcNamesList %}
              {% set npcFound = false %}
              {% for npcName in npcNamesList %}
                {% if not npcFound and npcName %}
                  {% set normalizedSeen = npcName | trim | lower %}
                  {% if normalizedSeen == normalizedNpcName %}
                    {% set npcFound = true %}
                  {% endif %}
                {% endif %}
              {% endfor %}
              {% if npcFound %}
                {% set rawText = '' %}
                {% if entry.content is defined and entry.content %}
                  {% set rawText = entry.content %}
                {% elif entry.summary is defined and entry.summary %}
                  {% set rawText = entry.summary %}
                {% endif %}
                {% set trimmedText = rawText | trim %}
                {% if trimmedText %}
                  {% set roleValue = entry.role if entry.role is defined and entry.role else 'system' %}
                  {% set collected.entries = collected.entries + [{ "role": roleValue | trim, "text": trimmedText }] %}
                {% endif %}
              {% endif %}
            {% endif %}
          {% endif %}
        {% endif %}
      {% endfor %}
      {% if collected.entries | length %}
        {% for entry in collected.entries %}
          <historyEntry>
            <role>{{ entry.role }}</role>
            <text>{{ entry.text }}</text>
          </historyEntry>
        {% endfor %}
      {% else %}
        <info>No recent history entries involving {{ npcNameValue }}.</info>
      {% endif %}
    {% endif %}
  {% endif %}
</recentNpcHistory>

Consider whether the NPC above would think of any of the above events as an important moment in their life. If so, create a concise memory of the event from the NPC's perspective, in the style of a diary entry or personal note. The memory should be no more than 2 sentences long. If none of the events would be significant enough to remember, return an empty element. Don't return a memory that's very similar to something already listed among their memories. Output in this format:

If no memories are generated, return:
<memory></memory>

Otherwise, return:
<memory>[1-2 sentece memory as described above]</memory>