<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title }}</title>
    <link rel="stylesheet" href="/css/main.css">
    <style>
        /* Override main.css to allow scrolling on debug page */
        body {
            overflow: auto !important;
            height: auto !important;
            min-height: 100vh;
        }
        .container {
            height: auto !important;
        }
        
        .debug-container {
            font-family: 'Consolas', 'Monaco', 'Courier New', monospace;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }
        .debug-section {
            margin-bottom: 30px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 8px;
            padding: 20px;
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        .debug-section h2 {
            color: #ffffff;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 2px solid rgba(255, 255, 255, 0.3);
        }
        .debug-json {
            background: rgba(0, 0, 0, 0.3);
            border: 1px solid rgba(255, 255, 255, 0.3);
            border-radius: 4px;
            padding: 15px;
            color: #ffffff;
            font-size: 14px;
            line-height: 1.4;
            overflow-x: auto;
            white-space: pre-wrap;
            word-break: break-word;
        }
        .no-player {
            color: rgba(255, 255, 255, 0.7);
            font-style: italic;
            text-align: center;
            padding: 20px;
        }
        .stats-summary {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        .stat-card {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 6px;
            padding: 12px;
            text-align: center;
        }
        .stat-label {
            color: rgba(255, 255, 255, 0.8);
            font-size: 12px;
            text-transform: uppercase;
            margin-bottom: 5px;
        }
        .stat-value {
            color: #ffffff;
            font-size: 18px;
            font-weight: bold;
        }
        .refresh-btn {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #667eea;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 10px 20px;
            cursor: pointer;
            font-weight: bold;
            text-decoration: none;
            display: inline-block;
        }
        .refresh-btn:hover {
            background: #5a6fd8;
        }
        .player-portrait {
            text-align: center;
            padding: 20px 0;
        }
        .portrait-image {
            max-width: 300px;
            max-height: 300px;
            border-radius: 8px;
            border: 2px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        }
        .portrait-placeholder {
            width: 300px;
            height: 300px;
            background: rgba(255, 255, 255, 0.05);
            border: 2px dashed rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: rgba(255, 255, 255, 0.5);
            font-size: 48px;
            margin: 0 auto;
        }
        .portrait-controls {
            margin-top: 15px;
        }
        .btn {
            background: #667eea;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 8px 16px;
            cursor: pointer;
            font-weight: bold;
            text-decoration: none;
            display: inline-block;
            margin: 5px;
        }
        .btn:hover {
            background: #5a6fd8;
        }
        .btn:disabled {
            background: rgba(255, 255, 255, 0.2);
            cursor: not-allowed;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîß Debug: Player Information</h1>
            <p>Current player status and detailed information</p>
            {% include "_navigation.njk" %}
        </div>

        <div class="debug-container">

            {% if player %}
                <!-- Quick Stats Summary -->
                <div class="debug-section">
                    <h2>üìä Quick Stats Overview</h2>
                    <div class="stats-summary">
                        <div class="stat-card">
                            <div class="stat-label">Name</div>
                            <div class="stat-value">{{ player.name }}</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">Level</div>
                            <div class="stat-value">{{ player.level }}</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">Health</div>
                            <div class="stat-value">{{ player.health }}/{{ player.maxHealth }}</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">Status</div>
                            <div class="stat-value" style="color: {{ 'rgb(150, 255, 150)' if player.alive else 'rgb(255, 150, 150)' }}">
                                {{ 'Alive' if player.alive else 'Dead' }}
                            </div>
                        </div>
                        {% if player.currentLocation %}
                        <div class="stat-card">
                            <div class="stat-label">Location</div>
                            <div class="stat-value">{{ player.currentLocation }}</div>
                        </div>
                        {% endif %}
                    </div>
                </div>

                <!-- Player Portrait -->
                <div class="debug-section">
                    <h2>üé® Player Portrait</h2>
                    <div class="player-portrait">
                        {% if playerJson.imageId %}
                            {% set imageUrl = '/generated-images/' + playerJson.imageId + '.png' %}
                            <img src="{{ imageUrl }}" alt="Portrait of {{ player.name }}" class="portrait-image" 
                                 onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';">
                            <div class="portrait-placeholder" style="display: none;">üé≠</div>
                        {% else %}
                            <div class="portrait-placeholder">üé≠</div>
                        {% endif %}
                        
                        <div class="portrait-controls">
                            {% if playerJson.imageId %}
                                <div style="margin-bottom: 10px; color: rgba(255, 255, 255, 0.7); font-size: 14px;">
                                    Image ID: {{ playerJson.imageId }}
                                </div>
                            {% endif %}
                            <button id="regeneratePortrait" class="btn" onclick="regeneratePlayerPortrait('{{ player.id }}')">
                                üîÑ Regenerate Portrait
                            </button>
                            {% if playerJson.imageId %}
                                <button class="btn" onclick="checkImageStatus('{{ playerJson.imageId }}')">
                                    üìä Check Status
                                </button>
                            {% endif %}
                        </div>
                    </div>
                </div>

                <!-- Full Player Status (getStatus() output) -->
                <div class="debug-section">
                    <h2>üéØ Player Status (getStatus())</h2>
                    <pre class="debug-json">{{ playerStatus | dump(2) }}</pre>
                </div>

                <!-- Full Player JSON (toJSON() output) -->
                <div class="debug-section">
                    <h2>üíæ Player JSON Data (toJSON())</h2>
                    <pre class="debug-json">{{ playerJson | dump(2) }}</pre>
                </div>

                <!-- Player Storage Info -->
                <div class="debug-section">
                    <h2>üóÉÔ∏è Storage Information</h2>
                    <div class="stats-summary">
                        <div class="stat-card">
                            <div class="stat-label">Total Players</div>
                            <div class="stat-value">{{ totalPlayers }}</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">Current Player ID</div>
                            <div class="stat-value">{{ currentPlayerId }}</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">Created At</div>
                            <div class="stat-value" style="font-size: 12px;">{{ playerJson.createdAt | replace('T', ' ') | replace('Z', '') if playerJson.createdAt else 'Unknown' }}</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">Last Updated</div>
                            <div class="stat-value" style="font-size: 12px;">{{ playerJson.lastUpdated | replace('T', ' ') | replace('Z', '') if playerJson.lastUpdated else 'Unknown' }}</div>
                        </div>
                    </div>
                </div>

            {% else %}
                <!-- No Current Player -->
                <div class="debug-section">
                    <h2>‚ùå No Current Player</h2>
                    <div class="no-player">
                        <p>No player is currently set.</p>
                        <p>
                            <a href="/player-stats" class="btn btn-primary" style="margin-top: 10px;">
                                <span>‚ûï</span> Create Player
                            </a>
                        </p>
                    </div>
                </div>

                <!-- Storage Info for No Player -->
                <div class="debug-section">
                    <h2>üóÉÔ∏è Storage Information</h2>
                    <div class="stats-summary">
                        <div class="stat-card">
                            <div class="stat-label">Total Players</div>
                            <div class="stat-value">{{ totalPlayers }}</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-label">Current Player</div>
                            <div class="stat-value" style="color: rgba(255, 255, 255, 0.5);">None</div>
                        </div>
                    </div>
                </div>
            {% endif %}

            <!-- All Players Data -->
            <div class="debug-section">
                <h2>üë• All Players</h2>
                {% if allPlayers and (allPlayers | length) > 0 %}
                    <details>
                        <summary style="cursor: pointer; color: #ffffff; font-weight: bold; margin-bottom: 15px;">
                            Click to expand all players data ({{ allPlayers | length }} players)
                        </summary>
                        <pre class="debug-json">{{ allPlayers | dump(2) }}</pre>
                    </details>
                {% else %}
                    <div class="no-player">
                        <p>No players in storage.</p>
                    </div>
                {% endif %}
            </div>

            <!-- Image Generation -->
            <div class="debug-section">
                <h2>üé® Image Generation</h2>
                <form id="imageGenForm" style="margin-bottom: 20px;">
                    <div style="display: grid; grid-template-columns: 1fr 150px 150px 150px; gap: 10px; margin-bottom: 15px; align-items: end;">
                        <div>
                            <label for="prompt" style="display: block; color: rgba(255, 255, 255, 0.8); margin-bottom: 5px; font-size: 12px; text-transform: uppercase;">Prompt</label>
                            <input type="text" id="prompt" name="prompt" 
                                   placeholder="a beautiful landscape with mountains and a lake, digital art"
                                   style="width: 100%; padding: 8px; border: 1px solid rgba(255, 255, 255, 0.3); background: rgba(0, 0, 0, 0.3); color: #ffffff; border-radius: 4px;" 
                                   required>
                        </div>
                        <div>
                            <label for="width" style="display: block; color: rgba(255, 255, 255, 0.8); margin-bottom: 5px; font-size: 12px; text-transform: uppercase;">Width</label>
                            <input type="number" id="width" name="width" value="512" min="64" max="4096" step="64"
                                   style="width: 100%; padding: 8px; border: 1px solid rgba(255, 255, 255, 0.3); background: rgba(0, 0, 0, 0.3); color: #ffffff; border-radius: 4px;">
                        </div>
                        <div>
                            <label for="height" style="display: block; color: rgba(255, 255, 255, 0.8); margin-bottom: 5px; font-size: 12px; text-transform: uppercase;">Height</label>
                            <input type="number" id="height" name="height" value="512" min="64" max="4096" step="64"
                                   style="width: 100%; padding: 8px; border: 1px solid rgba(255, 255, 255, 0.3); background: rgba(0, 0, 0, 0.3); color: #ffffff; border-radius: 4px;">
                        </div>
                        <div>
                            <label for="seed" style="display: block; color: rgba(255, 255, 255, 0.8); margin-bottom: 5px; font-size: 12px; text-transform: uppercase;">Seed</label>
                            <input type="number" id="seed" name="seed" value="42" min="0" max="1000000"
                                   style="width: 100%; padding: 8px; border: 1px solid rgba(255, 255, 255, 0.3); background: rgba(0, 0, 0, 0.3); color: #ffffff; border-radius: 4px;">
                        </div>
                    </div>
                    <div style="margin-bottom: 15px;">
                        <label for="negative_prompt" style="display: block; color: rgba(255, 255, 255, 0.8); margin-bottom: 5px; font-size: 12px; text-transform: uppercase;">Negative Prompt (Optional)</label>
                        <input type="text" id="negative_prompt" name="negative_prompt" 
                               placeholder="blurry, low quality, distorted"
                               style="width: 100%; padding: 8px; border: 1px solid rgba(255, 255, 255, 0.3); background: rgba(0, 0, 0, 0.3); color: #ffffff; border-radius: 4px;">
                    </div>
                    <button type="submit" 
                            style="background: #667eea; color: white; border: none; border-radius: 6px; padding: 12px 24px; cursor: pointer; font-weight: bold; font-size: 14px;">
                        üé® Generate Image
                    </button>
                    <button type="button" id="randomSeedBtn"
                            style="background: #48bb78; color: white; border: none; border-radius: 6px; padding: 12px 24px; cursor: pointer; font-weight: bold; font-size: 14px; margin-left: 10px;">
                        üé≤ Random Seed
                    </button>
                </form>
                
                <div id="imageGenStatus" style="margin-bottom: 15px; padding: 10px; border-radius: 4px; display: none;"></div>
                
                <div id="imageGenResults" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(256px, 1fr)); gap: 15px;"></div>
                
                <div style="margin-top: 20px;">
                    <h3 style="color: #ffffff; margin-bottom: 10px;">Recent Images</h3>
                    <div id="recentImages" style="display: grid; grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); gap: 10px;"></div>
                </div>
            </div>

            <!-- All Locations Data -->
            <div class="debug-section">
                <h2>üó∫Ô∏è All Locations</h2>
                {% if allLocations and (allLocations | length) > 0 %}
                    <details>
                        <summary style="cursor: pointer; color: #ffffff; font-weight: bold; margin-bottom: 15px;">
                            Click to expand all locations data
                        </summary>
                        <pre class="debug-json">{{ allLocations | dump(2) }}</pre>
                    </details>
                {% else %}
                    <div class="no-player">
                        <p>No locations defined in defs/locations.yaml</p>
                    </div>
                {% endif %}
            </div>

            <!-- Game World Data -->
            <div class="debug-section">
                <h2>üåç Game World Data (In-Memory)</h2>
                {% if gameWorld %}
                    <p><strong>Counts:</strong> 
                        Locations: {{ gameWorldCounts.locations }}, 
                        Location Exits: {{ gameWorldCounts.locationExits }}
                    </p>
                    <details>
                        <summary style="cursor: pointer; color: #ffffff; font-weight: bold; margin-bottom: 15px;">
                            Click to expand game world data
                        </summary>
                        <pre class="debug-json">{{ gameWorld | dump(2) }}</pre>
                    </details>
                {% else %}
                    <div class="no-player">
                        <p>No game world data in memory</p>
                    </div>
                {% endif %}
            </div>

            <!-- Save/Load Functionality -->
            <div class="debug-section">
                <h2>üíæ Save/Load Game State</h2>
                
                <div style="margin-bottom: 20px;">
                    <button id="saveGameBtn" style="
                        background: linear-gradient(135deg, #28a745, #20c997);
                        color: white;
                        border: none;
                        padding: 10px 20px;
                        border-radius: 5px;
                        cursor: pointer;
                        font-weight: bold;
                        margin-right: 10px;
                    ">üíæ Save Current Game</button>
                    
                    <button id="loadSavesBtn" style="
                        background: linear-gradient(135deg, #007bff, #6f42c1);
                        color: white;
                        border: none;
                        padding: 10px 20px;
                        border-radius: 5px;
                        cursor: pointer;
                        font-weight: bold;
                    ">üìÇ Load Game</button>
                </div>

                <div id="saveStatus" style="
                    margin: 10px 0;
                    padding: 10px;
                    border-radius: 5px;
                    display: none;
                "></div>

                <div id="savesContainer" style="display: none;">
                    <h3 style="color: #ffffff;">Available Saves:</h3>
                    <div id="savesList"></div>
                </div>
            </div>

            <!-- Available API Endpoints -->
            <div class="debug-section">
                <h2>üîå Available API Endpoints</h2>
                <pre class="debug-json">PLAYER ENDPOINTS:
GET  /api/player              - Get current player status
POST /api/player              - Create new player
POST /api/player/update-stats - Update player stats
POST /api/player/set-current  - Set current player
POST /api/player/levelup      - Level up current player
POST /api/player/generate-attributes - Generate new attributes

SAVE/LOAD ENDPOINTS:
POST /api/save                - Save current game state
POST /api/load                - Load game state from save
GET  /api/saves               - List available saves
DELETE /api/save/:saveName    - Delete a save

IMAGE GENERATION ENDPOINTS:
POST /api/generate-image      - Generate new image from prompt
GET  /api/images              - List all generated images
GET  /api/images/:id          - Get specific image metadata

CHAT ENDPOINTS:
POST /api/chat                - Send chat message to AI
GET  /api/chat/history        - Get chat history
DELETE /api/chat/history      - Clear chat history

OTHER ENDPOINTS:
GET  /debug                   - This debug page
GET  /player-stats           - Player stats configuration page</pre>
            </div>
        </div>
    </div>

    <script>
        // Console.log all JSON data displayed on the debug page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üîß Debug Page - JSON Data Console Output');
            console.log('=====================================');

            {% if player %}
                // Log Player Status (getStatus() output)
                console.log('üìä Player Status (getStatus()):');
                try {
                    const playerStatus = {{ playerStatus | dump | safe }};
                    console.log(playerStatus);
                } catch (error) {
                    console.error('Error parsing player status:', error);
                }

                // Log Player JSON Data (toJSON() output)
                console.log('\nüíæ Player JSON Data (toJSON()):');
                try {
                    const playerJson = {{ playerJson | dump | safe }};
                    console.log(playerJson);
                } catch (error) {
                    console.error('Error parsing player JSON:', error);
                }
            {% else %}
                console.log('‚ùå No current player set');
            {% endif %}

            // Log All Players Data
            console.log('\nüë• All Players Data:');
            {% if allPlayers and (allPlayers | length) > 0 %}
                try {
                    const allPlayers = {{ allPlayers | dump | safe }};
                    console.log(allPlayers);
                    console.log(`Total players in storage: {{ allPlayers | length }}`);
                } catch (error) {
                    console.error('Error parsing all players data:', error);
                }
            {% else %}
                console.log('No players in storage');
            {% endif %}

            // Log All Locations Data
            console.log('\nüó∫Ô∏è All Locations Data:');
            {% if allLocations and (allLocations | length) > 0 %}
                try {
                    const allLocations = {{ allLocations | dump | safe }};
                    console.log(allLocations);
                } catch (error) {
                    console.error('Error parsing all locations data:', error);
                }
            {% else %}
                console.log('No locations defined in defs/locations.yaml');
            {% endif %}

            console.log('\n=====================================');
            console.log('üéØ All debug JSON data has been logged to console');
        });

        // Image Generation functionality
        document.getElementById('randomSeedBtn').addEventListener('click', function() {
            document.getElementById('seed').value = Math.floor(Math.random() * 1000000);
        });

        document.getElementById('imageGenForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const payload = {
                prompt: formData.get('prompt'),
                width: parseInt(formData.get('width')),
                height: parseInt(formData.get('height')),
                seed: parseInt(formData.get('seed')),
                negative_prompt: formData.get('negative_prompt') || undefined,
                async: true // Enable async mode
            };

            const statusDiv = document.getElementById('imageGenStatus');
            const resultsDiv = document.getElementById('imageGenResults');
            
            // Show loading status
            statusDiv.style.display = 'block';
            statusDiv.style.background = 'rgba(102, 126, 234, 0.3)';
            statusDiv.style.border = '1px solid #667eea';
            statusDiv.style.color = '#ffffff';
            statusDiv.innerHTML = 'üé® Submitting image generation job...';
            
            // Disable form
            const submitBtn = e.target.querySelector('button[type="submit"]');
            submitBtn.disabled = true;
            submitBtn.innerHTML = '‚è≥ Processing...';

            try {
                // Submit job
                const response = await fetch('/api/generate-image', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });

                const result = await response.json();

                if (result.success && result.jobId) {
                    // Start progress tracking
                    statusDiv.innerHTML = `üé® Job queued: ${result.jobId}<br>‚è≥ ${result.message}`;
                    
                    // Track progress
                    trackJobProgress(result.jobId, statusDiv, resultsDiv, payload);
                    
                } else {
                    // Show error
                    statusDiv.style.background = 'rgba(245, 101, 101, 0.3)';
                    statusDiv.style.border = '1px solid #f56565';
                    statusDiv.innerHTML = `‚ùå Job submission failed: ${result.error}`;
                    
                    // Re-enable form
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = 'üé® Generate Image';
                }
                
            } catch (error) {
                statusDiv.style.background = 'rgba(245, 101, 101, 0.3)';
                statusDiv.style.border = '1px solid #f56565';
                statusDiv.innerHTML = `‚ùå Request failed: ${error.message}`;
                
                // Re-enable form
                submitBtn.disabled = false;
                submitBtn.innerHTML = 'üé® Generate Image';
            }
        });

        // Track job progress
        async function trackJobProgress(jobId, statusDiv, resultsDiv, originalPayload) {
            let completed = false;
            let attempts = 0;
            const maxAttempts = 60; // 2 minutes max
            
            const checkProgress = async () => {
                attempts++;
                
                try {
                    const response = await fetch(`/api/jobs/${jobId}`);
                    const result = await response.json();
                    
                    if (result.success) {
                        const job = result.job;
                        
                        // Update status display
                        const progressBar = `
                            <div style="width: 100%; background: rgba(0,0,0,0.3); border-radius: 4px; margin: 10px 0;">
                                <div style="width: ${job.progress}%; background: #667eea; height: 8px; border-radius: 4px; transition: width 0.3s;"></div>
                            </div>
                        `;
                        
                        statusDiv.innerHTML = `
                            üé® Job: ${jobId}<br>
                            üìä Status: ${job.status} (${job.progress}%)<br>
                            üí¨ ${job.message}
                            ${progressBar}
                            <small style="opacity: 0.7;">Attempt ${attempts}/${maxAttempts}</small>
                        `;
                        
                        if (job.status === 'completed') {
                            // Show success
                            statusDiv.style.background = 'rgba(72, 187, 120, 0.3)';
                            statusDiv.style.border = '1px solid #48bb78';
                            statusDiv.innerHTML = `‚úÖ Image generated successfully!<br>Job: ${jobId}<br>‚è±Ô∏è Processing time: ${Math.round((new Date(job.completedAt) - new Date(job.createdAt)) / 1000)}s`;
                            
                            // Display generated image
                            if (result.result && result.result.images.length > 0) {
                                const imageCard = document.createElement('div');
                                imageCard.style.cssText = `
                                    background: rgba(255, 255, 255, 0.1);
                                    border: 1px solid rgba(255, 255, 255, 0.3);
                                    border-radius: 8px;
                                    padding: 15px;
                                    text-align: center;
                                    margin-bottom: 15px;
                                `;
                                
                                imageCard.innerHTML = `
                                    <img src="${result.result.images[0].url}" alt="Generated image" 
                                         style="width: 100%; border-radius: 4px; margin-bottom: 10px;">
                                    <div style="color: rgba(255, 255, 255, 0.8); font-size: 12px;">
                                        <div style="margin-bottom: 5px; font-weight: bold;">${originalPayload.prompt}</div>
                                        <div>${originalPayload.width}√ó${originalPayload.height} | Seed: ${originalPayload.seed}</div>
                                        <div style="margin-top: 5px;">
                                            <a href="${result.result.images[0].url}" target="_blank" 
                                               style="color: #667eea; text-decoration: none;">View Full Size</a>
                                        </div>
                                    </div>
                                `;
                                
                                resultsDiv.appendChild(imageCard);
                                
                                // Load recent images
                                loadRecentImages();
                            }
                            
                            completed = true;
                            
                        } else if (job.status === 'failed' || job.status === 'timeout') {
                            // Show error
                            statusDiv.style.background = 'rgba(245, 101, 101, 0.3)';
                            statusDiv.style.border = '1px solid #f56565';
                            statusDiv.innerHTML = `‚ùå Generation failed: ${result.error || job.status}`;
                            completed = true;
                        }
                    } else {
                        throw new Error(result.error || 'Failed to get job status');
                    }
                    
                } catch (error) {
                    console.error('Progress tracking error:', error);
                    statusDiv.innerHTML += `<br><small style="color: #f56565;">‚ö†Ô∏è Status check failed: ${error.message}</small>`;
                }
                
                // Continue tracking if not completed and within limits
                if (!completed && attempts < maxAttempts) {
                    setTimeout(checkProgress, 2000); // Check every 2 seconds
                } else if (!completed) {
                    statusDiv.style.background = 'rgba(245, 101, 101, 0.3)';
                    statusDiv.style.border = '1px solid #f56565';
                    statusDiv.innerHTML = `‚ùå Job tracking timed out after ${maxAttempts} attempts`;
                    completed = true;
                }
                
                // Re-enable form when completed
                if (completed) {
                    const submitBtn = document.querySelector('#imageGenForm button[type="submit"]');
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = 'üé® Generate Image';
                }
            };
            
            // Start progress checking
            setTimeout(checkProgress, 1000); // Start after 1 second
        }

        // Load recent images
        async function loadRecentImages() {
            try {
                const response = await fetch('/api/images');
                const result = await response.json();
                
                if (result.success && result.images.length > 0) {
                    const recentDiv = document.getElementById('recentImages');
                    recentDiv.innerHTML = '';
                    
                    result.images.slice(0, 6).forEach(img => {
                        const imageCard = document.createElement('div');
                        imageCard.style.cssText = `
                            background: rgba(255, 255, 255, 0.05);
                            border: 1px solid rgba(255, 255, 255, 0.2);
                            border-radius: 6px;
                            padding: 10px;
                            text-align: center;
                            cursor: pointer;
                        `;
                        
                        imageCard.innerHTML = `
                            <img src="${img.images[0].url}" alt="Recent image" 
                                 style="width: 100%; border-radius: 4px; margin-bottom: 8px;">
                            <div style="color: rgba(255, 255, 255, 0.7); font-size: 11px;">
                                <div style="margin-bottom: 3px; font-weight: bold; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
                                    ${img.prompt.substring(0, 30)}...
                                </div>
                                <div>${img.width}√ó${img.height}</div>
                            </div>
                        `;
                        
                        imageCard.addEventListener('click', () => {
                            document.getElementById('prompt').value = img.prompt;
                            document.getElementById('width').value = img.width;
                            document.getElementById('height').value = img.height;
                            document.getElementById('seed').value = img.seed;
                            document.getElementById('negative_prompt').value = img.negative_prompt || '';
                        });
                        
                        recentDiv.appendChild(imageCard);
                    });
                }
            } catch (error) {
                console.error('Failed to load recent images:', error);
            }
        }

        // Load recent images on page load
        document.addEventListener('DOMContentLoaded', loadRecentImages);

        // Save/Load Functionality
        document.addEventListener('DOMContentLoaded', function() {
            const saveGameBtn = document.getElementById('saveGameBtn');
            const loadSavesBtn = document.getElementById('loadSavesBtn');
            const saveStatus = document.getElementById('saveStatus');
            const savesContainer = document.getElementById('savesContainer');
            const savesList = document.getElementById('savesList');

            // Save current game
            saveGameBtn.addEventListener('click', async function() {
                try {
                    showStatus('Saving game...', 'info');
                    
                    const response = await fetch('/api/save', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showStatus(`‚úÖ ${result.message}`, 'success');
                        console.log('Game saved successfully:', result);
                    } else {
                        showStatus(`‚ùå Save failed: ${result.error}`, 'error');
                        console.error('Save failed:', result);
                    }
                } catch (error) {
                    showStatus(`‚ùå Save failed: ${error.message}`, 'error');
                    console.error('Save error:', error);
                }
            });

            // Load saves list
            loadSavesBtn.addEventListener('click', async function() {
                try {
                    showStatus('Loading saves list...', 'info');
                    
                    const response = await fetch('/api/saves');
                    const result = await response.json();
                    
                    if (result.success) {
                        displaySaves(result.saves);
                        savesContainer.style.display = 'block';
                        showStatus(`üìÇ Found ${result.count} save(s)`, 'success');
                    } else {
                        showStatus(`‚ùå Failed to load saves: ${result.error}`, 'error');
                    }
                } catch (error) {
                    showStatus(`‚ùå Failed to load saves: ${error.message}`, 'error');
                    console.error('Load saves error:', error);
                }
            });

            function showStatus(message, type) {
                saveStatus.textContent = message;
                saveStatus.style.display = 'block';
                
                if (type === 'success') {
                    saveStatus.style.background = 'rgba(40, 167, 69, 0.3)';
                    saveStatus.style.border = '1px solid #28a745';
                    saveStatus.style.color = '#ffffff';
                } else if (type === 'error') {
                    saveStatus.style.background = 'rgba(220, 53, 69, 0.3)';
                    saveStatus.style.border = '1px solid #dc3545';
                    saveStatus.style.color = '#ffffff';
                } else {
                    saveStatus.style.background = 'rgba(0, 123, 255, 0.3)';
                    saveStatus.style.border = '1px solid #007bff';
                    saveStatus.style.color = '#ffffff';
                }
            }

            function displaySaves(saves) {
                savesList.innerHTML = '';
                
                if (saves.length === 0) {
                    savesList.innerHTML = '<p style="color: #ffffff;">No saves found</p>';
                    return;
                }

                saves.forEach(save => {
                    const saveDiv = document.createElement('div');
                    saveDiv.style.cssText = `
                        background: rgba(255, 255, 255, 0.1);
                        border: 1px solid rgba(255, 255, 255, 0.3);
                        border-radius: 5px;
                        padding: 15px;
                        margin: 10px 0;
                        color: #ffffff;
                    `;
                    
                    const timestamp = new Date(save.timestamp).toLocaleString();
                    
                    saveDiv.innerHTML = `
                        <div style="display: flex; justify-content: space-between; align-items: center;">
                            <div>
                                <h4 style="margin: 0 0 5px 0;">${save.playerName} (Level ${save.playerLevel})</h4>
                                <p style="margin: 0; font-size: 12px; opacity: 0.8;">${timestamp}</p>
                                <p style="margin: 5px 0 0 0; font-size: 12px;">Save: ${save.saveName}</p>
                            </div>
                            <div>
                                <button onclick="loadSave('${save.saveName}')" style="
                                    background: linear-gradient(135deg, #007bff, #6f42c1);
                                    color: white;
                                    border: none;
                                    padding: 8px 15px;
                                    border-radius: 3px;
                                    cursor: pointer;
                                    margin-right: 5px;
                                ">üìÇ Load</button>
                                <button onclick="deleteSave('${save.saveName}')" style="
                                    background: linear-gradient(135deg, #dc3545, #c82333);
                                    color: white;
                                    border: none;
                                    padding: 8px 15px;
                                    border-radius: 3px;
                                    cursor: pointer;
                                ">üóëÔ∏è Delete</button>
                            </div>
                        </div>
                    `;
                    
                    savesList.appendChild(saveDiv);
                });
            }

            // Global functions for load and delete (needed for inline onclick handlers)
            window.loadSave = async function(saveName) {
                try {
                    showStatus(`Loading save: ${saveName}...`, 'info');
                    
                    const response = await fetch('/api/load', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ saveName: saveName })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showStatus(`‚úÖ ${result.message}`, 'success');
                        console.log('Game loaded successfully:', result);
                        // Refresh the page to show loaded data
                        setTimeout(() => {
                            window.location.reload();
                        }, 2000);
                    } else {
                        showStatus(`‚ùå Load failed: ${result.error}`, 'error');
                        console.error('Load failed:', result);
                    }
                } catch (error) {
                    showStatus(`‚ùå Load failed: ${error.message}`, 'error');
                    console.error('Load error:', error);
                }
            };

            window.deleteSave = async function(saveName) {
                if (!confirm(`Are you sure you want to delete save: ${saveName}?`)) {
                    return;
                }
                
                try {
                    showStatus(`Deleting save: ${saveName}...`, 'info');
                    
                    const response = await fetch(`/api/save/${saveName}`, {
                        method: 'DELETE'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showStatus(`‚úÖ ${result.message}`, 'success');
                        console.log('Save deleted successfully:', result);
                        // Refresh the saves list
                        loadSavesBtn.click();
                    } else {
                        showStatus(`‚ùå Delete failed: ${result.error}`, 'error');
                        console.error('Delete failed:', result);
                    }
                } catch (error) {
                    showStatus(`‚ùå Delete failed: ${error.message}`, 'error');
                    console.error('Delete error:', error);
                }
            };

            // Player portrait functions
            window.regeneratePlayerPortrait = async function(playerId) {
                const button = document.getElementById('regeneratePortrait');
                const originalText = button.textContent;
                
                try {
                    button.disabled = true;
                    button.textContent = 'üîÑ Generating...';
                    
                    const response = await fetch(`/api/players/${playerId}/portrait`, {
                        method: 'POST'
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        showStatus(`‚úÖ ${result.message}`, 'success');
                        console.log('Portrait regeneration initiated:', result);
                        
                        // Auto-refresh the page in 3 seconds to show updated imageId
                        setTimeout(() => {
                            window.location.reload();
                        }, 3000);
                    } else {
                        showStatus(`‚ùå Portrait generation failed: ${result.error}`, 'error');
                        console.error('Portrait generation failed:', result);
                    }
                } catch (error) {
                    showStatus(`‚ùå Portrait generation failed: ${error.message}`, 'error');
                    console.error('Portrait generation error:', error);
                } finally {
                    button.disabled = false;
                    button.textContent = originalText;
                }
            };

            window.checkImageStatus = async function(imageId) {
                try {
                    const response = await fetch(`/api/jobs/${imageId}`);
                    const result = await response.json();
                    
                    if (result.success) {
                        showStatus(`üìä Image Status: ${result.job.status} - ${result.job.message}`, 'info');
                        console.log('Image job status:', result);
                        
                        // If completed, refresh to show the image
                        if (result.job.status === 'completed') {
                            setTimeout(() => {
                                window.location.reload();
                            }, 1000);
                        }
                    } else {
                        showStatus(`‚ùå Status check failed: ${result.error}`, 'error');
                        console.error('Status check failed:', result);
                    }
                } catch (error) {
                    showStatus(`‚ùå Status check failed: ${error.message}`, 'error');
                    console.error('Status check error:', error);
                }
            };
        });
    </script>
</body>
</html>