<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title | default("AI RPG Chat") }}</title>
    <link rel="stylesheet" href="/css/main.css">
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üéÆ AI RPG Chat Interface ü§ñ</h1>
            {% include "_navigation.njk" %}
        </div>
        
        <div class="main-content">
            <!-- Location Block (Left Side) -->            
            <div class="location-block">
                <div class="container">
                    <div class="location-header">
                        <h4>üìç <span class="location-name" id="locationName">Unknown Location</span></h4>
                    </div>
                    <div class="location-content" id="locationContent">
                        <div class="location-image" id="locationImage">
                            <div class="location-placeholder">
                                üèûÔ∏è
                                <p>No location image</p>
                            </div>
                        </div>
                        <div class="location-info" id="locationInfo">
                            
                            <p class="location-description" id="locationDescription">Your current location will appear here when you start exploring.</p>
                            <div class="location-details" id="locationDetails">
                                <span class="location-level" id="locationLevel">Level: ?</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Chat Block (Right Side) -->
            <div class="chat-container">
                <div class="chat-log" id="chatLog">
                    {% if chatHistory and chatHistory.length > 0 %}
                        {% for message in chatHistory %}
                            <div class="message {{ 'user-message' if message.role == 'user' else 'ai-message' }}">
                                <div class="message-sender">
                                    {% if message.role == 'user' %}
                                        üë§ You
                                    {% else %}
                                        ü§ñ AI Game Master
                                    {% endif %}
                                </div>
                                <div>{{ message.content }}</div>
                                <div class="message-timestamp">{{ message.timestamp | replace('T', ' ') | replace('Z', '') }}</div>
                            </div>
                        {% endfor %}
                    {% else %}
                        <div class="message ai-message">
                            <div class="message-sender">ü§ñ AI Game Master</div>
                            <div>Welcome to the AI RPG! I'm your Game Master. Configure your AI settings above and then describe what kind of adventure you'd like to embark on.</div>
                        </div>
                    {% endif %}
                </div>
                
                <div class="input-area">
                    <textarea class="message-input" id="messageInput" placeholder="Type your message here..." rows="2"></textarea>
                    <button class="send-button" id="sendButton">Send</button>
                </div>
            </div>
        </div>
    </div>
    
    <script src="/js/chat.js"></script>
    <script>
        // Initialize with system prompt from server
        document.addEventListener('DOMContentLoaded', () => {
            window.systemPrompt = {{ systemPrompt | dump | safe }};
            new AIRPGChat();
            
            // Add save/load functionality
            initSaveLoadButtons();
            
            // Initialize location display
            initLocationDisplay();
        });

        function initLocationDisplay() {
            // Function to update location display
            window.updateLocationDisplay = function(location) {
                const locationName = document.getElementById('locationName');
                const locationDescription = document.getElementById('locationDescription');
                const locationLevel = document.getElementById('locationLevel');
                const locationImage = document.getElementById('locationImage');
                
                if (location) {
                    locationName.textContent = location.name || 'Unknown Location';
                    locationDescription.textContent = location.description || 'No description available.';
                    locationLevel.textContent = `Level: ${location.baseLevel || '?'}`;
                    
                    // Update image if available
                    if (location.imageId) {
                        locationImage.innerHTML = `<img src="/generated-images/${location.imageId}.png" alt="${location.name}" onerror="this.parentElement.innerHTML='<div class=\\'location-placeholder\\'>üèûÔ∏è<p>Image not found</p></div>'">`;
                    } else {
                        locationImage.innerHTML = '<div class="location-placeholder">üèûÔ∏è<p>No location image</p></div>';
                    }
                } else {
                    locationName.textContent = 'Unknown Location';
                    locationDescription.textContent = 'Your current location will appear here when you start exploring.';
                    locationLevel.textContent = 'Level: ?';
                    locationImage.innerHTML = '<div class="location-placeholder">üèûÔ∏è<p>No location image</p></div>';
                }
            };
            
            // Load current player location on page load
            loadCurrentLocation();
        }

        async function loadCurrentLocation() {
            try {
                const response = await fetch('/api/player');
                const result = await response.json();
                
                if (result.success && result.player && result.player.currentLocation) {
                    // Fetch location details
                    const locationResponse = await fetch(`/api/locations/${result.player.currentLocation}`);
                    const locationResult = await locationResponse.json();
                    
                    if (locationResult.success && locationResult.location) {
                        window.updateLocationDisplay(locationResult.location);
                    }
                }
            } catch (error) {
                console.log('Could not load current location:', error);
            }
        }

        function initSaveLoadButtons() {
            const saveGameBtn = document.getElementById('saveGameBtn');
            const loadGameBtn = document.getElementById('loadGameBtn');
            const newGameBtn = document.getElementById('newGameBtn');
            
            saveGameBtn.addEventListener('click', async function() {
                try {
                    this.disabled = true;
                    this.innerHTML = '<span>‚è≥</span> Saving...';
                    
                    const response = await fetch('/api/save', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        this.innerHTML = '<span>‚úÖ</span> Saved!';
                        alert(`Game saved successfully!\n\nSave: ${result.saveName}`);
                    } else {
                        this.innerHTML = '<span>‚ùå</span> Save Failed';
                        alert(`Save failed: ${result.error}`);
                    }
                } catch (error) {
                    this.innerHTML = '<span>‚ùå</span> Save Failed';
                    alert(`Save failed: ${error.message}`);
                } finally {
                    setTimeout(() => {
                        this.disabled = false;
                        this.innerHTML = '<span>üíæ</span> Save Game';
                    }, 2000);
                }
            });

            loadGameBtn.addEventListener('click', async function() {
                try {
                    const response = await fetch('/api/saves');
                    const result = await response.json();
                    
                    if (!result.success || result.saves.length === 0) {
                        alert('No saves found!');
                        return;
                    }
                    
                    // Create a selection dialog
                    let saveOptions = 'Select a save to load:\n\n';
                    result.saves.forEach((save, index) => {
                        const timestamp = new Date(save.timestamp).toLocaleString();
                        saveOptions += `${index + 1}. ${save.playerName} (Level ${save.playerLevel}) - ${timestamp}\n`;
                    });
                    
                    const selection = prompt(saveOptions + '\nEnter the number of the save to load (or 0 to cancel):');
                    const saveIndex = parseInt(selection) - 1;
                    
                    if (saveIndex >= 0 && saveIndex < result.saves.length) {
                        const selectedSave = result.saves[saveIndex];
                        
                        if (confirm(`Load save: ${selectedSave.playerName} (${new Date(selectedSave.timestamp).toLocaleString()})?`)) {
                            this.disabled = true;
                            this.innerHTML = '<span>‚è≥</span> Loading...';
                            
                            const loadResponse = await fetch('/api/load', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ saveName: selectedSave.saveName })
                            });
                            
                            const loadResult = await loadResponse.json();
                            
                            if (loadResult.success) {
                                alert(`Game loaded successfully!\n\n${loadResult.message}`);
                                window.location.reload();
                            } else {
                                alert(`Load failed: ${loadResult.error}`);
                            }
                        }
                    }
                } catch (error) {
                    alert(`Load failed: ${error.message}`);
                } finally {
                    this.disabled = false;
                    this.innerHTML = '<span>üìÇ</span> Load Game';
                }
            });

            if (newGameBtn) {
            newGameBtn.addEventListener('click', async function() {
                try {
                    const confirmation = confirm('Start a new game? This will clear your current progress.\n\nYou can optionally enter a custom player name and description.');
                    if (!confirmation) return;
                    
                    // Get optional player details
                    const playerName = prompt('Enter your character name (or leave blank for "Adventurer"):') || 'Adventurer';
                    const playerDescription = prompt('Enter your character description (optional):') || 'A brave soul embarking on a new adventure.';
                    
                    this.disabled = true;
                    this.innerHTML = '<span>‚è≥</span> Creating...';
                    
                    const response = await fetch('/api/new-game', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            playerName: playerName,
                            playerDescription: playerDescription
                        })
                    });
                    
                    const result = await response.json();
                    
                    if (result.success) {
                        this.innerHTML = '<span>‚úÖ</span> New Game Started!';
                        alert(`New game created successfully!\n\nPlayer: ${result.player.name}\nStarting Location: ${result.startingLocation.name}\n\nYour adventure begins now!`);
                        window.location.reload();
                    } else {
                        this.innerHTML = '<span>‚ùå</span> Failed';
                        alert(`New game creation failed: ${result.error}`);
                    }
                } catch (error) {
                    this.innerHTML = '<span>‚ùå</span> Failed';
                    alert(`New game creation failed: ${error.message}`);
                } finally {
                    setTimeout(() => {
                        this.disabled = false;
                        this.innerHTML = '<span>üÜï</span> New Game';
                    }, 2000);
                }
            });
            }
        }
    </script>
</body>
</html>
