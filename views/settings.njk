<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{ title | default("Game Settings Manager") }}</title>
    <link rel="stylesheet" href="/css/main.css">
    <link rel="stylesheet" href="/css/settings.css">
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>‚öôÔ∏è Game Settings Manager</h1>
            <p>Create and manage custom game world settings</p>
            {% include "_navigation.njk" %}
        </div>

        <div id="statusMessage" class="status-message"></div>

        <div class="settings-grid">
            <!-- Settings List Panel -->
            <div class="settings-list">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem;">
                    <h2>üìã Saved Settings</h2>
                    <div style="display: flex; gap: 0.5rem;">
                        <button id="loadBtn" class="btn-small btn-secondary">Load</button>
                        <button id="saveAllBtn" class="btn-small btn-primary">Save All</button>
                    </div>
                </div>
                
                <div id="settingsList">
                    <div class="empty-state">
                        <p>No settings created yet.<br>Create your first setting using the form ‚Üí</p>
                    </div>
                </div>
            </div>

            <!-- Settings Form Panel -->
            <div class="settings-form">
                <h2 id="formTitle">‚ú® Create New Setting</h2>
                
                <form id="settingForm">
                    <input type="hidden" id="settingId" name="id">

                    <div class="form-group">
                        <label for="name">Setting Name *</label>
                        <input type="text" id="name" name="name" required>
                        <div class="help-text">Unique name for this setting configuration</div>
                    </div>

                    <div class="form-group">
                        <label for="description">Description</label>
                        <textarea id="description" name="description" placeholder="Describe this setting and what makes it unique..."></textarea>
                    </div>

                    <div class="form-group">
                        <label for="theme">World Theme *</label>
                        <input type="text" id="theme" name="theme" required placeholder="e.g., Fantasy, Sci-Fi, Modern, Horror, Cyberpunk...">
                        <div class="help-text">The overarching setting of the game world</div>
                    </div>

                    <div class="form-group">
                        <label for="genre">Game Genre *</label>
                        <input type="text" id="genre" name="genre" required placeholder="e.g., Adventure, Mystery, Combat, Exploration, Survival...">
                        <div class="help-text">Primary style of gameplay focus</div>
                    </div>

                    <div class="form-group">
                        <label for="startingLocationType">Starting Location Type</label>
                        <input type="text" id="startingLocationType" name="startingLocationType" placeholder="e.g., Tavern, Village, City, Wilderness, Ship...">
                        <div class="help-text">Where adventures typically begin</div>
                    </div>

                    <div class="form-group">
                        <label for="magicLevel">Magic Level</label>
                        <input type="text" id="magicLevel" name="magicLevel" placeholder="e.g., High Magic, Low Magic, Rare, Ubiquitous, None...">
                        <div class="help-text">How common magic is in the world</div>
                    </div>

                    <div class="form-group">
                        <label for="techLevel">Technology Level</label>
                        <input type="text" id="techLevel" name="techLevel" placeholder="e.g., Medieval, Renaissance, Industrial, Modern, Futuristic...">
                        <div class="help-text">Technological advancement of the world</div>
                    </div>

                    <div class="form-group">
                        <label for="tone">Narrative Tone</label>
                        <input type="text" id="tone" name="tone" placeholder="e.g., Heroic, Dark, Comedic, Gritty, Epic, Lighthearted...">
                        <div class="help-text">Overall emotional atmosphere</div>
                    </div>

                    <div class="form-group">
                        <label for="difficulty">Difficulty Level</label>
                        <input type="text" id="difficulty" name="difficulty" placeholder="e.g., Easy, Normal, Hard, Lethal, Forgiving...">
                        <div class="help-text">Challenge level and lethality</div>
                    </div>

                    <div class="form-group">
                        <label for="playerStartingLevel">Player Starting Level</label>
                        <input type="number" id="playerStartingLevel" name="playerStartingLevel" min="1" max="20" value="1">
                        <div class="help-text">Level for new players (1-20)</div>
                    </div>

                    <!-- Preview Section -->
                    <div id="previewSection" class="preview-section" style="display: none;">
                        <div class="preview-title">Setting Preview</div>
                        <div id="previewContent"></div>
                    </div>

                    <div class="form-actions">
                        <div class="button-group">
                            <button type="button" id="clearBtn" class="btn btn-secondary">Clear</button>
                            <button type="submit" id="submitBtn" class="btn btn-primary">Create Setting</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script>
        let currentSettings = [];
        let selectedSettingId = null;
        let isEditMode = false;
        let appliedSetting = null;

        // Load settings on page load
        document.addEventListener('DOMContentLoaded', async function() {
            await refreshSettingsList();
            await loadCurrentSetting();
            setupEventListeners();
        });

        async function refreshSettingsList() {
            try {
                const response = await fetch('/api/settings');
                const data = await response.json();
                
                if (data.success) {
                    currentSettings = data.settings;
                    renderSettingsList();
                }
            } catch (error) {
                showMessage('Error loading settings: ' + error.message, 'error');
            }
        }

        async function loadCurrentSetting() {
            try {
                const response = await fetch('/api/settings/current');
                const data = await response.json();
                
                if (data.success && data.setting) {
                    appliedSetting = data.setting;
                    updateCurrentSettingDisplay();
                }
            } catch (error) {
                console.warn('Could not load current setting:', error.message);
            }
        }

        function updateCurrentSettingDisplay() {
            const listHeader = document.querySelector('.settings-list h2');
            if (appliedSetting) {
                listHeader.innerHTML = `üìã Saved Settings <small style="color: #4CAF50;">(${appliedSetting.name} applied)</small>`;
            } else {
                listHeader.innerHTML = 'üìã Saved Settings';
            }
        }

        function renderSettingsList() {
            const container = document.getElementById('settingsList');
            
            if (currentSettings.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <p>No settings created yet.<br>Create your first setting using the form ‚Üí</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = currentSettings.map(setting => `
                <div class="setting-item ${selectedSettingId === setting.id ? 'selected' : ''} ${appliedSetting && appliedSetting.id === setting.id ? 'applied' : ''}" 
                     onclick="selectSetting('${setting.id}')">
                    <div class="setting-header">
                        <div class="setting-name">
                            ${setting.name}
                            ${appliedSetting && appliedSetting.id === setting.id ? ' <span style="color: #4CAF50;">‚úì Applied</span>' : ''}
                        </div>
                    </div>
                    <div class="setting-meta">
                        ${setting.theme}/${setting.genre} ‚Ä¢ ${setting.tone} ‚Ä¢ ${setting.difficulty}
                    </div>
                    <div class="setting-actions">
                        <button class="btn-small btn-edit" onclick="editSetting('${setting.id}'); event.stopPropagation();">Edit</button>
                        <button class="btn-small btn-primary" onclick="applySetting('${setting.id}'); event.stopPropagation();">Apply</button>
                        <button class="btn-small btn-clone" onclick="cloneSetting('${setting.id}'); event.stopPropagation();">Clone</button>
                        <button class="btn-small btn-delete" onclick="deleteSetting('${setting.id}'); event.stopPropagation();">Delete</button>
                    </div>
                </div>
            `).join('');
        }

        function selectSetting(settingId) {
            selectedSettingId = settingId;
            renderSettingsList();
            updatePreview();
        }

        function editSetting(settingId) {
            const setting = currentSettings.find(s => s.id === settingId);
            if (!setting) return;

            isEditMode = true;
            selectedSettingId = settingId;
            
            // Populate form with setting data
            document.getElementById('settingId').value = setting.id;
            document.getElementById('name').value = setting.name;
            document.getElementById('description').value = setting.description || '';
            document.getElementById('theme').value = setting.theme || '';
            document.getElementById('genre').value = setting.genre || '';
            document.getElementById('startingLocationType').value = setting.startingLocationType || '';
            document.getElementById('magicLevel').value = setting.magicLevel || '';
            document.getElementById('techLevel').value = setting.techLevel || '';
            document.getElementById('tone').value = setting.tone || '';
            document.getElementById('difficulty').value = setting.difficulty || '';
            document.getElementById('playerStartingLevel').value = setting.playerStartingLevel;

            // Update form title and button
            document.getElementById('formTitle').textContent = `‚úèÔ∏è Edit Setting: ${setting.name}`;
            document.getElementById('submitBtn').textContent = 'Update Setting';
            
            renderSettingsList();
            updatePreview();
        }

        async function cloneSetting(settingId) {
            try {
                const newName = prompt('Enter name for cloned setting:');
                if (!newName) return;

                const response = await fetch(`/api/settings/${settingId}/clone`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ newName })
                });

                const data = await response.json();
                
                if (data.success) {
                    showMessage('Setting cloned successfully!', 'success');
                    await refreshSettingsList();
                } else {
                    showMessage('Error cloning setting: ' + data.error, 'error');
                }
            } catch (error) {
                showMessage('Error cloning setting: ' + error.message, 'error');
            }
        }

        async function deleteSetting(settingId) {
            if (!confirm('Are you sure you want to delete this setting?')) return;

            try {
                const response = await fetch(`/api/settings/${settingId}`, {
                    method: 'DELETE'
                });

                const data = await response.json();
                
                if (data.success) {
                    showMessage('Setting deleted successfully!', 'success');
                    
                    // Clear form if we were editing this setting
                    if (selectedSettingId === settingId) {
                        clearForm();
                    }
                    
                    await refreshSettingsList();
                } else {
                    showMessage('Error deleting setting: ' + data.error, 'error');
                }
            } catch (error) {
                showMessage('Error deleting setting: ' + error.message, 'error');
            }
        }

        async function applySetting(settingId) {
            try {
                const response = await fetch(`/api/settings/${settingId}/apply`, {
                    method: 'POST'
                });

                const data = await response.json();
                
                if (data.success) {
                    showMessage('Setting applied successfully! Game Master will now use this setting.', 'success');
                    appliedSetting = data.setting;
                    console.log('Applied Setting:', appliedSetting);
                    updateCurrentSettingDisplay();
                    renderSettingsList();
                } else {
                    showMessage('Error applying setting: ' + data.error, 'error');
                }

                // Get /api/settings/current to confirm
                const response2 = await fetch('/api/settings/current');
                const data2 = await response2.json();

                // Log current setting to console
                console.log('Current Setting after apply:', data2);
            } catch (error) {
                showMessage('Error applying setting: ' + error.message, 'error');
            }
        }

        function clearForm() {
            document.getElementById('settingForm').reset();
            document.getElementById('settingId').value = '';
            document.getElementById('formTitle').textContent = '‚ú® Create New Setting';
            document.getElementById('submitBtn').textContent = 'Create Setting';
            
            isEditMode = false;
            selectedSettingId = null;
            
            // Clear all inputs to blank
            const inputs = document.querySelectorAll('#settingForm input, #settingForm select');
            inputs.forEach(input => {
                input.value = '';
            });

            document.getElementById('playerStartingLevel').value = '1';
            renderSettingsList();
            updatePreview();
        }

        function updatePreview() {
            const form = document.getElementById('settingForm');
            const formData = new FormData(form);
            
            const preview = document.getElementById('previewSection');
            const content = document.getElementById('previewContent');
            
            const name = formData.get('name');
            if (!name) {
                preview.style.display = 'none';
                return;
            }
            
            preview.style.display = 'block';
            
            const theme = formData.get('theme') || 'Not set';
            const genre = formData.get('genre') || 'Not set';
            const tone = formData.get('tone') || 'Not set';
            const difficulty = formData.get('difficulty') || 'Not set';
            const magicLevel = formData.get('magicLevel') || 'Not set';
            const techLevel = formData.get('techLevel') || 'Not set';
            
            content.innerHTML = `
                <strong>${name}</strong><br>
                <small>${theme}/${genre} setting with ${tone} tone and ${difficulty} difficulty</small><br>
                Magic: ${magicLevel} ‚Ä¢ Tech: ${techLevel}
            `;
        }

        function setupEventListeners() {
            // Form submission
            document.getElementById('settingForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                
                const formData = new FormData(e.target);
                const settingData = Object.fromEntries(formData.entries());
                
                // Convert playerStartingLevel to number
                settingData.playerStartingLevel = parseInt(settingData.playerStartingLevel) || 1;
                
                try {
                    let response;
                    if (isEditMode) {
                        const settingId = settingData.id;
                        delete settingData.id;
                        response = await fetch(`/api/settings/${settingId}`, {
                            method: 'PUT',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(settingData)
                        });
                    } else {
                        response = await fetch('/api/settings', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(settingData)
                        });
                    }

                    const data = await response.json();
                    
                    if (data.success) {
                        showMessage(`Setting ${isEditMode ? 'updated' : 'created'} successfully!`, 'success');
                        clearForm();
                        await refreshSettingsList();
                    } else {
                        showMessage(`Error ${isEditMode ? 'updating' : 'creating'} setting: ` + data.error, 'error');
                    }
                } catch (error) {
                    showMessage(`Error ${isEditMode ? 'updating' : 'creating'} setting: ` + error.message, 'error');
                }
            });

            // Clear button
            document.getElementById('clearBtn').addEventListener('click', clearForm);

            // Form change detection for preview
            document.getElementById('settingForm').addEventListener('input', updatePreview);
            document.getElementById('settingForm').addEventListener('change', updatePreview);

            // Save all button
            document.getElementById('saveAllBtn').addEventListener('click', async function() {
                try {
                    const response = await fetch('/api/settings/save', {
                        method: 'POST'
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        showMessage(`Saved ${data.result.count} settings to files!`, 'success');
                    } else {
                        showMessage('Error saving settings: ' + data.error, 'error');
                    }
                } catch (error) {
                    showMessage('Error saving settings: ' + error.message, 'error');
                }
            });

            // Load button
            document.getElementById('loadBtn').addEventListener('click', async function() {
                if (!confirm('This will replace current settings with saved files. Continue?')) return;
                
                try {
                    const response = await fetch('/api/settings/load', {
                        method: 'POST'
                    });

                    const data = await response.json();
                    
                    if (data.success) {
                        showMessage(`Loaded ${data.result.count} settings from files!`, 'success');
                        clearForm();
                        await refreshSettingsList();
                    } else {
                        showMessage('Error loading settings: ' + data.error, 'error');
                    }
                } catch (error) {
                    showMessage('Error loading settings: ' + error.message, 'error');
                }
            });
        }

        function showMessage(message, type) {
            const messageEl = document.getElementById('statusMessage');
            messageEl.textContent = message;
            messageEl.className = `status-message status-${type}`;
            messageEl.style.display = 'block';
            
            setTimeout(() => {
                messageEl.style.display = 'none';
            }, 5000);
        }
    </script>
</body>
</html>